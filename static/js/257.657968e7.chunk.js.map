{"version":3,"file":"static/js/257.657968e7.chunk.js","mappings":"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","sources":["api.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'c8fbf26aaf1719f4073eb2d835a7332f',\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getMovie = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n  return data;\n};\n\nexport const getCastById = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n  return data;\n};\n\nexport const getReviewsById = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n  return data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data;\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Button = styled(Link)`\n  display: inline-block;\n  padding: 3px 10px;\n  margin-left: 3px;\n  margin-bottom: 2px;\n  border-radius: 2px;\n  border: 1px solid #ccc;\n  color: black;\n  font-size: 12px;\n  text-decoration: none;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  padding-bottom: 5px;\n  margin-bottom: 15px;\n  border-bottom: 1px solid #ccc;\n`;\n\nexport const ImageHolder = styled.div`\n  padding: 2px;\n  width: 30vw;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n`;\n\nexport const InfoHolder = styled.div`\n  padding: 10px;\n  width: 70vw;\n`;\n\nexport const Title = styled.p`\n  margin-bottom: 15px;\n  margin-top: 15px;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nexport const Score = styled.p`\n  margin-bottom: 15px;\n  font-size: 14px;\n`;\n\nexport const Overview = styled.p`\n  margin-bottom: 15px;\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 15px;\n  font-size: 14px;\n`;\n\nexport const Genres = styled.p`\n  margin-bottom: 15px;\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nexport const ListGenres = styled.ul`\n  display: flex;\n  list-style: none;\n`;\n\nexport const ItemGenre = styled.li`\n  margin-right: 5px;\n  font-size: 14px;\n`;\n\nexport const AddInfo = styled.p`\n  margin-bottom: 15px;\n  margin-left: 5px;\n  font-size: 14px;\n`;\n\nexport const List = styled.ul`\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 15px;\n`;\n\nexport const Item = styled.li`\n  margin-left: 25px;\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n","import { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport * as moviesAPI from '../../api';\nimport {\n  Button,\n  Image,\n  Container,\n  ImageHolder,\n  InfoHolder,\n  Title,\n  Score,\n  Overview,\n  Text,\n  Genres,\n  AddInfo,\n  List,\n  Item,\n  ListGenres,\n  ItemGenre,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n  const [poster, setPoster] = useState('');\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    setStatus('pending');\n\n    async function getMovies() {\n      try {\n        const result = await moviesAPI.getMovieById(movieId);\n\n        setMovie(result);\n        setStatus('resolved');\n        if (result.poster_path !== null) {\n          setPoster(`http://image.tmdb.org/t/p/w780/${result.poster_path}`);\n        }\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    getMovies();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'rejected' && <h3>{error}</h3>}\n      {status === 'resolved' && (\n        <>\n          <Button to={backLinkHref.current}>Go back</Button>\n          <Container>\n            <ImageHolder>\n              <Image src={`${poster}`} alt=\"poster\" />\n            </ImageHolder>\n            <InfoHolder>\n              <Title>{movie.title}</Title>\n              <Score>Use Score: {movie.vote_average}</Score>\n              <Overview>Overview</Overview>\n              <Text>{movie.overview}</Text>\n              <Genres>Genres</Genres>\n              <ListGenres>\n                {movie.genres.map(({ id, name }) => (\n                  <ItemGenre key={id}>{name}</ItemGenre>\n                ))}\n              </ListGenres>\n            </InfoHolder>\n          </Container>\n          <AddInfo>Additional information</AddInfo>\n          <List>\n            <Item>\n              <Link to=\"cast\">Cast</Link>\n            </Item>\n            <Item>\n              <Link to=\"reviews\">Reviews</Link>\n            </Item>\n          </List>\n        </>\n      )}\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  movies: PropTypes.array,\n  error: PropTypes.any,\n  status: PropTypes.string,\n  poster: PropTypes.string,\n};\n\nexport default MovieDetails;\n"],"names":["searchParams","URLSearchParams","api_key","axios","getMovie","data","getMovieById","id","getCastById","getReviewsById","getMoviesByQuery","query","Button","styled","Link","Container","ImageHolder","Image","InfoHolder","Title","Score","Overview","Text","Genres","ListGenres","ItemGenre","AddInfo","List","Item","useState","movie","setMovie","status","setStatus","error","setError","poster","setPoster","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","moviesAPI","result","poster_path","message","getMovies","to","current","src","alt","title","vote_average","overview","genres","map","name","Suspense","fallback"],"sourceRoot":""}