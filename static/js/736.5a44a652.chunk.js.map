{"version":3,"file":"static/js/736.5a44a652.chunk.js","mappings":"+SAEMA,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAGXC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAQ,mCAAG,sGACCD,EAAAA,EAAAA,IAAA,8BAAiCH,IADlC,uBACdK,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRC,EAAY,mCAAG,WAAMC,GAAN,yFACHJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,YAA0BP,IADvB,uBAClBK,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAW,mCAAG,WAAMD,GAAN,yFACFJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCP,IADhC,uBACjBK,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXI,EAAc,mCAAG,WAAMF,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCP,IAD7B,uBACpBK,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAgB,mCAAG,WAAMC,GAAN,yFACPR,EAAAA,EAAAA,IAAA,wBACJH,EADI,4DAC4DW,IAFrD,uBACtBN,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qD,kKC1BhBO,EAAOC,EAAAA,GAAAA,GAAH,oEAKJC,EAAOD,EAAAA,GAAAA,GAAH,mEAKJE,EAAQF,EAAAA,GAAAA,IAAH,mFAMLG,EAAOH,EAAAA,GAAAA,EAAH,oEAKJI,EAAYJ,EAAAA,GAAAA,EAAH,oE,SCoCtB,EArDa,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,+GAE2BC,EAAAA,GAAsBH,GAFjD,gBAEYN,EAFZ,EAEYA,KAERC,EAAQD,GACRG,EAAU,YALd,gDAOIE,EAAS,KAAMK,SACfP,EAAU,YARd,0DAHc,sBACdA,EAAU,WADI,mCAedQ,EACD,GAAE,CAACL,KAGF,gCACc,aAAXJ,IAAyB,wBAAKE,KAC/B,SAACX,EAAD,UACc,aAAXS,GACCF,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAc1B,EAAvB,EAAuBA,GAAI2B,EAA3B,EAA2BA,UAA3B,OACP,UAACpB,EAAD,WACoB,OAAjBmB,IACC,SAAClB,EAAD,CACEoB,IAAG,yCAAoCF,GACvCG,IAAI,UAGR,SAACpB,EAAD,UAAOgB,KACP,UAACf,EAAD,yBAAuBiB,OARd3B,EADJ,QAelB,C","sources":["api.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'c8fbf26aaf1719f4073eb2d835a7332f',\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getMovie = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n  return data;\n};\n\nexport const getCastById = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n  return data;\n};\n\nexport const getReviewsById = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n  return data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 15px;\n  padding-left: 25px;\n`;\n\nexport const Item = styled.li`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 10vw;\n  margin-bottom: 10px;\n`;\n\nexport const Name = styled.p`\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as moviesAPI from '../../api';\nimport { List, Item, Image, Name, Character } from '../Cast/Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n\n    async function getCast() {\n      try {\n        const { cast } = await moviesAPI.getCastById(movieId);\n\n        setCast(cast);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'rejected' && <h3>{error}</h3>}\n      <List>\n        {status === 'resolved' &&\n          cast.map(({ name, profile_path, id, character }) => (\n            <Item key={id}>\n              {profile_path !== null && (\n                <Image\n                  src={`http://image.tmdb.org/t/p/w780/${profile_path}`}\n                  alt=\"foto\"\n                />\n              )}\n              <Name>{name}</Name>\n              <Character>Character: {character}</Character>\n            </Item>\n          ))}\n      </List>\n    </>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.array,\n  error: PropTypes.any,\n  status: PropTypes.string,\n};\n\nexport default Cast;\n"],"names":["searchParams","URLSearchParams","api_key","axios","getMovie","data","getMovieById","id","getCastById","getReviewsById","getMoviesByQuery","query","List","styled","Item","Image","Name","Character","useState","cast","setCast","status","setStatus","error","setError","movieId","useParams","useEffect","moviesAPI","message","getCast","map","name","profile_path","character","src","alt"],"sourceRoot":""}