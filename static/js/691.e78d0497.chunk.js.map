{"version":3,"file":"static/js/691.e78d0497.chunk.js","mappings":"+SAEMA,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAGXC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAQ,mCAAG,sGACCD,EAAAA,EAAAA,IAAA,8BAAiCH,IADlC,uBACdK,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRC,EAAY,mCAAG,WAAMC,GAAN,yFACHJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,YAA0BP,IADvB,uBAClBK,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAW,mCAAG,WAAMD,GAAN,yFACFJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCP,IADhC,uBACjBK,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXI,EAAc,mCAAG,WAAMF,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCP,IAD7B,uBACpBK,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAgB,mCAAG,WAAMC,GAAN,yFACPR,EAAAA,EAAAA,IAAA,wBACJH,EADI,4DAC4DW,IAFrD,uBACtBN,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qD,mLC1BhBO,EAAOC,EAAAA,GAAAA,KAAH,6CAIJC,EAAQD,EAAAA,GAAAA,MAAH,4MAYLE,EAASF,EAAAA,GAAAA,OAAH,mDAING,EAAOH,EAAAA,GAAAA,GAAH,qEAKJI,EAAOJ,EAAAA,GAAAA,GAAH,mE,SC8CjB,EAnEe,WAAO,IAAD,EACnB,GAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOzB,EAAP,KAAqB0B,EAArB,KAEMf,EAAK,UAAGX,EAAa2B,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCAOd,+GAE8BC,EAAAA,GAA2BpB,GAFzD,gBAEYqB,EAFZ,EAEYA,QAERZ,GAAU,OAAIY,IACdV,EAAU,YALd,gDAOIE,EAAS,KAAMS,SACfX,EAAU,YARd,0DAPc,sBACA,KAAVX,IAIJW,EAAU,WALI,mCAmBdY,GACD,GAAE,CAACvB,IAUJ,OACE,iCACE,UAACC,EAAD,CAAMuB,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfb,EAAgB,CAAEf,MAAO2B,EAAKE,SAAS7B,MAAM8B,QAC7CH,EAAKI,QACLtB,EAAU,GACX,EAIG,WACE,SAACN,EAAD,CAAO6B,KAAK,OAAOC,KAAK,WACxB,SAAC7B,EAAD,CAAQ4B,KAAK,SAAb,uBAEU,aAAXtB,IAAyB,wBAAKE,KAC/B,SAACP,EAAD,UACc,aAAXK,GACCF,EAAO0B,KAAI,gBAAGtC,EAAH,EAAGA,GAAIuC,EAAP,EAAOA,MAAP,OACT,SAAC7B,EAAD,WACE,SAAC,KAAD,CAAM8B,GAAE,kBAAaxC,GAAMyC,MAAO,CAAEC,KAAMrB,GAA1C,SACGkB,KAFMvC,EADF,QAUpB,C","sources":["api.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'c8fbf26aaf1719f4073eb2d835a7332f',\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getMovie = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n  return data;\n};\n\nexport const getCastById = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n  return data;\n};\n\nexport const getReviewsById = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n  return data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 10px;\n`;\n\nexport const Input = styled.input`\n  margin-bottom: 15px;\n  width: 250px;\n  border: 1px solid #ccc;\n  &:hover,\n  :focus {\n    outline: 0;\n    border-color: transparent;\n    box-shadow: 0 0 3px #00bfff;\n  }\n`;\n\nexport const Button = styled.button`\n  border: 1px solid #ccc;\n`;\n\nexport const List = styled.ul`\n  margin-left: 15px;\n  list-style: circle;\n`;\n\nexport const Item = styled.li`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as moviesAPI from '../../api';\nimport { Form, Input, Button, List, Item } from './Movies.styled';\n\nconst Movies = () => {\n  const [titles, setTitles] = useState([]);\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    setStatus('pending');\n\n    async function getMovies() {\n      try {\n        const { results } = await moviesAPI.getMoviesByQuery(query);\n\n        setTitles([...results]);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    getMovies();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n    setTitles([]);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Input type=\"text\" name=\"query\" />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n      {status === 'rejected' && <h3>{error}</h3>}\n      <List>\n        {status === 'resolved' &&\n          titles.map(({ id, title }) => (\n            <Item key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </Item>\n          ))}\n      </List>\n    </>\n  );\n};\n\nMovies.propTypes = {\n  titles: PropTypes.array,\n  error: PropTypes.any,\n  status: PropTypes.string,\n  searchParams: PropTypes.object,\n};\n\nexport default Movies;\n"],"names":["searchParams","URLSearchParams","api_key","axios","getMovie","data","getMovieById","id","getCastById","getReviewsById","getMoviesByQuery","query","Form","styled","Input","Button","List","Item","useState","titles","setTitles","status","setStatus","error","setError","useSearchParams","setSearchParams","get","location","useLocation","useEffect","moviesAPI","results","message","getMovies","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","type","name","map","title","to","state","from"],"sourceRoot":""}