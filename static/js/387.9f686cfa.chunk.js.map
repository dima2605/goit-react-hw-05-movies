{"version":3,"file":"static/js/387.9f686cfa.chunk.js","mappings":"+SAEMA,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAGXC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAQ,mCAAG,sGACCD,EAAAA,EAAAA,IAAA,8BAAiCH,IADlC,uBACdK,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRC,EAAY,mCAAG,WAAMC,GAAN,yFACHJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,YAA0BP,IADvB,uBAClBK,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAW,mCAAG,WAAMD,GAAN,yFACFJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCP,IADhC,uBACjBK,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXI,EAAc,mCAAG,WAAMF,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCP,IAD7B,uBACpBK,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdK,EAAgB,mCAAG,WAAMC,GAAN,yFACPR,EAAAA,EAAAA,IAAA,wBACJH,EADI,4DAC4DW,IAFrD,uBACtBN,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qD,kKC1BhBO,EAAOC,EAAAA,GAAAA,GAAH,8CAIJC,EAAOD,EAAAA,GAAAA,GAAH,mEAKJE,EAASF,EAAAA,GAAAA,EAAH,+GAONG,EAASH,EAAAA,GAAAA,EAAH,4CAINI,EAAWJ,EAAAA,GAAAA,EAAH,yF,SCmCrB,EAnDgB,WACd,OAA8BK,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,+GAE8BC,EAAAA,GAAyBH,GAFvD,gBAEYI,EAFZ,EAEYA,QAERT,EAAWS,GACXP,EAAU,YALd,gDAOIE,EAAS,KAAMM,SACfR,EAAU,YARd,0DAHc,sBACdA,EAAU,WADI,mCAedS,EACD,GAAE,CAACN,KAGF,gCACc,aAAXJ,IAAyB,wBAAKE,IACnB,aAAXF,GAAyBF,EAAQa,OAAS,IACzC,SAACpB,EAAD,UACGO,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAS5B,EAApB,EAAoBA,GAApB,OACX,UAACO,EAAD,YACE,UAACC,EAAD,sBAAiBmB,MACjB,SAAClB,EAAD,UAASmB,MAFA5B,EADA,MAQL,aAAXc,GAA4C,IAAnBF,EAAQa,SAChC,SAACf,EAAD,wDAIP,C","sources":["api.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'c8fbf26aaf1719f4073eb2d835a7332f',\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getMovie = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n  return data;\n};\n\nexport const getCastById = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n  return data;\n};\n\nexport const getReviewsById = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n  return data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 25px;\n`;\n\nexport const Item = styled.li`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nexport const Author = styled.p`\n  margin-top: 15px;\n  margin-bottom: 15px;\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nexport const Review = styled.p`\n  font-size: 14px;\n`;\n\nexport const NoReview = styled.p`\n  margin-top: 15px;\n  margin-bottom: 10px;\n  font-size: 14px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as moviesAPI from '../../api';\nimport { List, Item, Author, Review, NoReview } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n\n    async function getReviews() {\n      try {\n        const { results } = await moviesAPI.getReviewsById(movieId);\n\n        setReviews(results);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'rejected' && <h3>{error}</h3>}\n      {status === 'resolved' && reviews.length > 0 && (\n        <List>\n          {reviews.map(({ author, content, id }) => (\n            <Item key={id}>\n              <Author>Author: {author}</Author>\n              <Review>{content}</Review>\n            </Item>\n          ))}\n        </List>\n      )}\n      {status === 'resolved' && reviews.length === 0 && (\n        <NoReview>We dont have any reviews for this movie</NoReview>\n      )}\n    </>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.array,\n  error: PropTypes.any,\n  status: PropTypes.string,\n};\n\nexport default Reviews;\n"],"names":["searchParams","URLSearchParams","api_key","axios","getMovie","data","getMovieById","id","getCastById","getReviewsById","getMoviesByQuery","query","List","styled","Item","Author","Review","NoReview","useState","reviews","setReviews","status","setStatus","error","setError","movieId","useParams","useEffect","moviesAPI","results","message","getReviews","length","map","author","content"],"sourceRoot":""}